package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"errors"
	"fmt"

	"github.com/aaanger/graphql-test/graph/model"
	"github.com/aaanger/graphql-test/pkg/middleware"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, req model.RegisterReq) (*model.AuthRes, error) {
	user, accessToken, err := r.UserRepo.Register(ctx, &req)
	if err != nil {
		return nil, err
	}

	return &model.AuthRes{
		User:  user,
		Token: accessToken,
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, req model.LoginReq) (*model.AuthRes, error) {
	user, accessToken, err := r.UserRepo.Login(ctx, &req)
	if err != nil {
		return nil, err
	}

	return &model.AuthRes{
		User:  user,
		Token: accessToken,
	}, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, req model.CreatePostReq) (*model.Post, error) {
	userID, err := middleware.GetUserID(ctx)
	if err != nil {
		return nil, err
	}

	post, err := r.PostRepo.CreatePost(ctx, userID, &req)
	if err != nil {
		return nil, err
	}

	return post, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, postID int, req model.UpdatePostReq) (*model.Post, error) {
	userID, err := middleware.GetUserID(ctx)
	if err != nil {
		return nil, err
	}

	err = r.PostRepo.UpdatePost(ctx, userID, postID, &req)
	if err != nil {
		return nil, err
	}

	post, err := r.PostRepo.GetPostByID(ctx, postID)
	if err != nil {
		return nil, err
	}

	return post, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, postID int) (string, error) {
	userID, err := middleware.GetUserID(ctx)
	if err != nil {
		return "Unauthorized", err
	}

	err = r.PostRepo.DeletePost(ctx, userID, postID)
	if err != nil {
		return "Failed to delete post", err
	}

	return "Post deleted successfully", nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, req model.CreateCommentReq) (*model.Comment, error) {
	userID, err := middleware.GetUserID(ctx)
	if err != nil {
		return nil, err
	}

	isAllowed, err := r.CommentRepo.IsCommentsAllowed(ctx, req.PostID)
	if !isAllowed {
		return nil, errors.New("comments are not allowed for this post")
	}

	if len(req.Body) > 2000 {
		return nil, errors.New("comment must be less than 2000 chars")
	}

	comment, err := r.CommentRepo.CreateComment(ctx, userID, &req)
	if err != nil {
		return nil, err
	}

	return comment, nil
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, req model.UpdateCommentReq) (*model.Comment, error) {
	userID, err := middleware.GetUserID(ctx)
	if err != nil {
		return nil, err
	}

	if len(req.Body) > 2000 {
		return nil, errors.New("comment must be less than 2000 chars")
	}

	err = r.CommentRepo.UpdateComment(ctx, userID, &req)
	if err != nil {
		return nil, err
	}

	updatedComment, err := r.CommentRepo.GetCommentByID(ctx, req.ID)
	if err != nil {
		return nil, err
	}

	return updatedComment, nil
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, commentID int) (string, error) {
	userID, err := middleware.GetUserID(ctx)
	if err != nil {
		return "Unauthorized", err
	}

	err = r.CommentRepo.DeleteComment(ctx, userID, commentID)
	if err != nil {
		return "Failed to delete comment", err
	}

	return "Deleted comment", nil
}

// GetPostsByUserID is the resolver for the getPostsByUserID field.
func (r *queryResolver) GetPostsByUserID(ctx context.Context, userID int) ([]*model.Post, error) {
	panic(fmt.Errorf("not implemented: GetPostsByUserID - getPostsByUserID"))
}

// GetPostByID is the resolver for the getPostByID field.
func (r *queryResolver) GetPostByID(ctx context.Context, id int) (*model.Post, error) {
	post, err := r.PostRepo.GetPostByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return post, nil
}

// GetCommentsByPostID is the resolver for the getCommentsByPostID field.
func (r *queryResolver) GetCommentsByPostID(ctx context.Context, postID int, first *int, last *int, after *string, before *string) (*model.CommentConnection, error) {
	panic(fmt.Errorf("not implemented: GetCommentsByPostID - getCommentsByPostID"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) GetPosts(ctx context.Context, userID int) ([]*model.Post, error) {
	posts, err := r.PostRepo.GetAllPostsByUserID(ctx, userID)
	if err != nil {
		return nil, err
	}

	return posts, nil
}
func (r *queryResolver) GetComments(ctx context.Context, postID int, first *int, last *int, after *string, before *string) (*model.CommentConnection, error) {
	comments, err := r.CommentRepo.GetCommentsByPostID(ctx, postID, first, last, after, before)
	if err != nil {
		return nil, err
	}

	return comments, nil
}
*/
