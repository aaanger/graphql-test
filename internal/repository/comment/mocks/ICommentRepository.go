// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/aaanger/graphql-test/internal/graph/model"

	mock "github.com/stretchr/testify/mock"
)

// ICommentRepository is an autogenerated mock type for the ICommentRepository type
type ICommentRepository struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, userID, req
func (_m *ICommentRepository) CreateComment(ctx context.Context, userID int, req *model.CreateCommentReq) (*model.Comment, error) {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *model.CreateCommentReq) (*model.Comment, error)); ok {
		return rf(ctx, userID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *model.CreateCommentReq) *model.Comment); ok {
		r0 = rf(ctx, userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *model.CreateCommentReq) error); ok {
		r1 = rf(ctx, userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, userID, commentID
func (_m *ICommentRepository) DeleteComment(ctx context.Context, userID int, commentID int) error {
	ret := _m.Called(ctx, userID, commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userID, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommentByID provides a mock function with given fields: ctx, id
func (_m *ICommentRepository) GetCommentByID(ctx context.Context, id int) (*model.Comment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 *model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.Comment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsByPostID provides a mock function with given fields: ctx, postID, first, last, after, before
func (_m *ICommentRepository) GetCommentsByPostID(ctx context.Context, postID int, first *int, last *int, after *string, before *string) (*model.CommentConnection, error) {
	ret := _m.Called(ctx, postID, first, last, after, before)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByPostID")
	}

	var r0 *model.CommentConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *int, *int, *string, *string) (*model.CommentConnection, error)); ok {
		return rf(ctx, postID, first, last, after, before)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *int, *int, *string, *string) *model.CommentConnection); ok {
		r0 = rf(ctx, postID, first, last, after, before)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CommentConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *int, *int, *string, *string) error); ok {
		r1 = rf(ctx, postID, first, last, after, before)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsCommentsAllowed provides a mock function with given fields: ctx, postID
func (_m *ICommentRepository) IsCommentsAllowed(ctx context.Context, postID int) (bool, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for IsCommentsAllowed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, userID, req
func (_m *ICommentRepository) UpdateComment(ctx context.Context, userID int, req *model.UpdateCommentReq) error {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *model.UpdateCommentReq) error); ok {
		r0 = rf(ctx, userID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICommentRepository creates a new instance of ICommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICommentRepository {
	mock := &ICommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
