// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model2 "github.com/aaanger/graphql-test/internal/graph/model"

	mock "github.com/stretchr/testify/mock"
)

// IPostRepository is an autogenerated mock type for the IPostRepository type
type IPostRepository struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, userID, req
func (_m *IPostRepository) CreatePost(ctx context.Context, userID int, req *model2.CreatePostReq) (*model2.Post, error) {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *model2.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *model2.CreatePostReq) (*model2.Post, error)); ok {
		return rf(ctx, userID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *model2.CreatePostReq) *model2.Post); ok {
		r0 = rf(ctx, userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model2.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *model2.CreatePostReq) error); ok {
		r1 = rf(ctx, userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: ctx, userID, postID
func (_m *IPostRepository) DeletePost(ctx context.Context, userID int, postID int) error {
	ret := _m.Called(ctx, userID, postID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPostsByUserID provides a mock function with given fields: ctx, userID
func (_m *IPostRepository) GetAllPostsByUserID(ctx context.Context, userID int) ([]*model2.Post, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPostsByUserID")
	}

	var r0 []*model2.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*model2.Post, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*model2.Post); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model2.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostByID provides a mock function with given fields: ctx, id
func (_m *IPostRepository) GetPostByID(ctx context.Context, id int) (*model2.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 *model2.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model2.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model2.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model2.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: ctx, userID, postID, req
func (_m *IPostRepository) UpdatePost(ctx context.Context, userID int, postID int, req *model2.UpdatePostReq) error {
	ret := _m.Called(ctx, userID, postID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *model2.UpdatePostReq) error); ok {
		r0 = rf(ctx, userID, postID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIPostRepository creates a new instance of IPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPostRepository {
	mock := &IPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
